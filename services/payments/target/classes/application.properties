# Actuator and Prometheus exposure
management.endpoints.web.exposure.include=health,info,prometheus

# Enable health probes (readiness/liveness)
management.endpoint.health.probes.enabled=true

# Enable health indicators for Redis and RabbitMQ
management.health.redis.enabled=true
management.health.rabbit.enabled=true

# Logging levels - rely on logback-spring for JSON formatting
logging.level.root=INFO
logging.level.com.globalbooks.payments=DEBUG

# RabbitMQ connection from env with sensible defaults; docker-compose overrides
spring.rabbitmq.host=${SPRING_RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${SPRING_RABBITMQ_PORT:5672}
spring.rabbitmq.username=${SPRING_RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${SPRING_RABBITMQ_PASSWORD:guest}

# Redis connection from env with sensible defaults; docker-compose overrides
spring.redis.host=${SPRING_REDIS_HOST:localhost}
spring.redis.port=${SPRING_REDIS_PORT:6379}

# Application metadata
info.app.name=Payments Service
info.app.description=GlobalBooks Payments microservice
info.app.version=1.0.0

# Keep existing container interface
server.port=8080